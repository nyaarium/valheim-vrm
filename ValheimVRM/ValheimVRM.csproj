<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>Library</OutputType>
		<Version>1.6.0</Version>
		<TargetFramework>net471</TargetFramework>
	</PropertyGroup>

	<!-- Validate required environment variables -->
	<Target Name="ValidateEnvironment" BeforeTargets="PrepareForBuild">
		<Error Condition="'$(VALHEIM_INSTALL_PATH)' == ''" Text="VALHEIM_INSTALL_PATH environment variable is not set. Please set it to your Valheim installation directory (ex: C:\Steam\steamapps\common\Valheim)" />
		<Error Condition="!Exists('$(VALHEIM_INSTALL_PATH)')" Text="VALHEIM_INSTALL_PATH directory does not exist: $(VALHEIM_INSTALL_PATH)" />
		<Error Condition="!Exists('$(VALHEIM_INSTALL_PATH)/valheim_Data/Managed')" Text="Valheim Managed DLLs not found at: $(VALHEIM_INSTALL_PATH)/valheim_Data/Managed" />
		<Error Condition="!Exists('$(VALHEIM_INSTALL_PATH)/BepInEx/core')" Text="BepInEx core DLLs not found at: $(VALHEIM_INSTALL_PATH)/BepInEx/core" />
	</Target>

	<!-- Project configuration and paths -->
	<PropertyGroup>
		<ROOT_DIR>$(MSBuildProjectDirectory)/..</ROOT_DIR>

		<!-- Source for DLL references during build -->
		<VALHEIM_MANAGED>$(VALHEIM_INSTALL_PATH)/valheim_Data/Managed</VALHEIM_MANAGED>
		<VALHEIM_BEPINEX_CORE>$(VALHEIM_INSTALL_PATH)/BepInEx/core</VALHEIM_BEPINEX_CORE>

		<!-- Path to Valheim install for copying built files (rapid updates) -->
		<VALHEIM_PLUGINS_PATH>$(VALHEIM_INSTALL_PATH)/BepInEx/plugins</VALHEIM_PLUGINS_PATH>

		<LIBS>$(ROOT_DIR)/Libs</LIBS>
		<LIBS_MANAGED>$(LIBS)/Managed</LIBS_MANAGED>
		<LIBS_PLUGINS_64>$(LIBS)/Plugins/x86_64</LIBS_PLUGINS_64>

		<FINAL_RELEASE>$(ROOT_DIR)/release</FINAL_RELEASE>
		<RELEASE_STAGING>$(ROOT_DIR)/release_files</RELEASE_STAGING>
		<RELEASE_MANAGED>$(RELEASE_STAGING)/valheim_Data/Managed</RELEASE_MANAGED>
		<RELEASE_PLUGIN>$(RELEASE_STAGING)/BepInEx/plugins</RELEASE_PLUGIN>

		<Pdb2MdbPath>$(ROOT_DIR)/pdb2mdb.exe</Pdb2MdbPath>
	</PropertyGroup>

	<ItemGroup>
		<!-- BepInEx -->
		<Reference Include="BepInEx" HintPath="$(VALHEIM_BEPINEX_CORE)/BepInEx.dll" />
		<Reference Include="0Harmony" HintPath="$(VALHEIM_BEPINEX_CORE)/0Harmony.dll" />

		<!-- Valheim -->
		<Reference Include="assembly_utils" HintPath="$(VALHEIM_MANAGED)/assembly_utils.dll" />
		<Reference Include="assembly_guiutils" HintPath="$(VALHEIM_MANAGED)/assembly_guiutils.dll" />
		<Reference Include="assembly_valheim" HintPath="$(VALHEIM_MANAGED)/assembly_valheim.dll" />

		<!-- Unity Engine -->
		<Reference Include="UnityEngine" HintPath="$(VALHEIM_MANAGED)/UnityEngine.dll" />
		<Reference Include="UnityEngine.AnimationModule" HintPath="$(VALHEIM_MANAGED)/UnityEngine.AnimationModule.dll" />
		<Reference Include="UnityEngine.AssetBundleModule" HintPath="$(VALHEIM_MANAGED)/UnityEngine.AssetBundleModule.dll" />
		<Reference Include="UnityEngine.CoreModule" HintPath="$(VALHEIM_MANAGED)/UnityEngine.CoreModule.dll" />
		<Reference Include="UnityEngine.PhysicsModule" HintPath="$(VALHEIM_MANAGED)/UnityEngine.PhysicsModule.dll" />
		<!--
		<Reference Include="UnityEngine.ImageConversionModule" HintPath="$(VALHEIM_MANAGED)/UnityEngine.ImageConversionModule.dll" />
		-->
		<Reference Include="UnityEngine.UI" HintPath="$(VALHEIM_MANAGED)/UnityEngine.UI.dll" />

		<!-- VRM -->
		<Reference Include="VRM" HintPath="$(LIBS_MANAGED)/VRM.dll" />
		<Reference Include="VRM10" HintPath="$(LIBS_MANAGED)/VRM10.dll" />
		<Reference Include="VrmLib" HintPath="$(LIBS_MANAGED)/VrmLib.dll" />
		<Reference Include="VRMShaders.GLTF.IO.Runtime" HintPath="$(LIBS_MANAGED)/VRMShaders.GLTF.IO.Runtime.dll" />
		<Reference Include="VRMShaders.GLTF.UniUnlit.Runtime" HintPath="$(LIBS_MANAGED)/VRMShaders.GLTF.UniUnlit.Runtime.dll" />
		<Reference Include="VRMShaders.VRM.IO.Runtime" HintPath="$(LIBS_MANAGED)/VRMShaders.VRM.IO.Runtime.dll" />
		<Reference Include="VRMShaders.VRM10.Format.Runtime" HintPath="$(LIBS_MANAGED)/VRMShaders.VRM10.Format.Runtime.dll" />
		<Reference Include="VRMShaders.VRM10.MToon10.Runtime" HintPath="$(LIBS_MANAGED)/VRMShaders.VRM10.MToon10.Runtime.dll" />
		<Reference Include="MToon" HintPath="$(LIBS_MANAGED)/MToon.dll" />
		<Reference Include="UniGLTF" HintPath="$(LIBS_MANAGED)/UniGLTF.dll" />
		<Reference Include="UniGLTF.Utils" HintPath="$(LIBS_MANAGED)/UniGLTF.Utils.dll" />
		<Reference Include="UniHumanoid" HintPath="$(LIBS_MANAGED)/UniHumanoid.dll" />
		<Reference Include="FastSpringBone" HintPath="$(LIBS_MANAGED)/FastSpringBone.dll" />
		<Reference Include="FastSpringBone10" HintPath="$(LIBS_MANAGED)/FastSpringBone10.dll" />
		<Reference Include="SpringBoneJobs" HintPath="$(LIBS_MANAGED)/SpringBoneJobs.dll" />

		<!-- Unity Extra -->
		<Reference Include="Unity.Burst" HintPath="$(LIBS_MANAGED)/Unity.Burst.dll" />
		<Reference Include="Unity.Mathematics" HintPath="$(LIBS_MANAGED)/Unity.Mathematics.dll" />

		<!-- Image Stuff -->
		<Reference Include="AsyncImageLoader" HintPath="$(LIBS_MANAGED)/AsyncImageLoader.Runtime.dll" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="CloudinaryDotNet" Version="1.18.1" />
		<PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.3">
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
	</ItemGroup>

	<PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
		<DebugType>pdbonly</DebugType>
	</PropertyGroup>


	<!-- Version Info -->
	<PropertyGroup>
		<VersionInfoFile>$(MSBuildProjectDirectory)/VersionInfo.g.cs</VersionInfoFile>
	</PropertyGroup>
	<Target Name="GenerateVersionInfo" BeforeTargets="CoreCompile">
		<ItemGroup>
			<VersionInfoFileLines Include="namespace ValheimVRM {" />
			<VersionInfoFileLines Include="	public static class VersionInfo {" />
			<VersionInfoFileLines Include="		public const string PluginVersion = &quot;$(Version)&quot;%3B" />
			<VersionInfoFileLines Include="	}" />
			<VersionInfoFileLines Include="}" />
		</ItemGroup>
		<WriteLinesToFile File="$(VersionInfoFile)" Lines="@(VersionInfoFileLines)" Overwrite="true" />
	</Target>


	<Target Name="PostBuild" AfterTargets="PostBuildEvent">
		<!-- Delete old release zip files -->
		<ItemGroup>
			<OldZipFiles Include="$(ROOT_DIR)/ValheimVRM-*.zip" />
		</ItemGroup>
		<Delete Files="@(OldZipFiles)" ContinueOnError="true" />

		<!-- Delete old files from BepInEx plugins directory (only on Windows) -->
		<ItemGroup Condition=" '$(OS)' == 'Windows_NT' and '$(VALHEIM_INSTALL_PATH)' != '' ">
			<OldInstallFiles Include="$(VALHEIM_PLUGINS_PATH)\ValheimVRM\$(TargetFileName)" />
			<OldInstallFiles Include="$(VALHEIM_PLUGINS_PATH)\ValheimVRM\UniVRM.shaders" />

			<OldInstallFiles Include="$(VALHEIM_PLUGINS_PATH)\ValheimVRM\$(TargetName).pdb" />
			<OldInstallFiles Include="$(VALHEIM_PLUGINS_PATH)\ValheimVRM\$(TargetFileName).mdb" />
		</ItemGroup>
		<Delete Condition=" '$(OS)' == 'Windows_NT' and '$(VALHEIM_INSTALL_PATH)' != '' " Files="@(OldInstallFiles)" ContinueOnError="true" />

		<!-- Copy files -->
		<ItemGroup>
			<!-- VRM -->
			<LibFiles Include="$(LIBS_MANAGED)/VRM.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/VRM10.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/VrmLib.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/VRMShaders.GLTF.IO.Runtime.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/VRMShaders.GLTF.UniUnlit.Runtime.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/VRMShaders.VRM.IO.Runtime.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/VRMShaders.VRM10.Format.Runtime.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/VRMShaders.VRM10.MToon10.Runtime.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/MToon.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/UniGLTF.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/UniGLTF.Utils.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/UniHumanoid.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/FastSpringBone.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/FastSpringBone10.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/SpringBoneJobs.dll" />

			<!-- Unity Extra -->
			<LibFiles Include="$(LIBS_MANAGED)/Unity.Burst.dll" />
			<LibFiles Include="$(LIBS_MANAGED)/Unity.Mathematics.dll" />

			<!-- Image Stuff -->
			<LibFiles Include="$(LIBS_MANAGED)/AsyncImageLoader.Runtime.dll" />
			<LibFiles Include="$(LIBS_PLUGINS_64)/FreeImage.dll" />
		</ItemGroup>


		<!-- DEBUG BUILD STUFF -->
		<Exec Condition=" '$(Configuration)' == 'Debug' " Command="&quot;$(Pdb2MdbPath)&quot; &quot;$(TargetPath)&quot;" />

		<!-- Copy debug files to local Valheim installation (only on Windows) -->
		<ItemGroup Condition=" '$(Configuration)' == 'Debug' and '$(OS)' == 'Windows_NT' and '$(VALHEIM_INSTALL_PATH)' != '' ">
			<DebugFiles Include="$(TargetPath)" />
			<DebugFiles Include="$(ROOT_DIR)/Assets/UniVRM.shaders" />

			<DebugFiles Include="$(TargetDir)$(TargetName).pdb" Condition="Exists('$(TargetDir)$(TargetName).pdb')" />
			<DebugFiles Include="$(TargetDir)$(TargetFileName).mdb" Condition="Exists('$(TargetDir)$(TargetFileName).mdb')" />
		</ItemGroup>
		<Copy Condition=" '$(Configuration)' == 'Debug' and '$(OS)' == 'Windows_NT' and '$(VALHEIM_INSTALL_PATH)' != '' " SourceFiles="@(DebugFiles)" DestinationFolder="$(VALHEIM_PLUGINS_PATH)/ValheimVRM" />


		<!-- RELEASE BUILD STUFF -->

		<!-- Copy release files to local Valheim installation (only on Windows) -->
		<ItemGroup Condition=" '$(Configuration)' == 'Release' and '$(OS)' == 'Windows_NT' and '$(VALHEIM_INSTALL_PATH)' != '' ">
			<ReleaseFiles Include="$(TargetPath)" />
			<ReleaseFiles Include="$(ROOT_DIR)/Assets/UniVRM.shaders" />
		</ItemGroup>
		<Copy Condition=" '$(Configuration)' == 'Release' and '$(OS)' == 'Windows_NT' and '$(VALHEIM_INSTALL_PATH)' != '' " SourceFiles="@(ReleaseFiles)" DestinationFolder="$(VALHEIM_PLUGINS_PATH)/ValheimVRM" />

		<!-- Clean release directory -->
		<RemoveDir Condition=" '$(Configuration)' == 'Release' " Directories="$(FINAL_RELEASE)" ContinueOnError="true" />
		<RemoveDir Condition=" '$(Configuration)' == 'Release' " Directories="$(RELEASE_STAGING)" ContinueOnError="true" />

		<MakeDir Directories="$(FINAL_RELEASE)" Condition=" '$(Configuration)' == 'Release' " />
		<MakeDir Directories="$(RELEASE_STAGING)" Condition=" '$(Configuration)' == 'Release' " />
		<MakeDir Directories="$(RELEASE_STAGING)/ValheimVRM" Condition=" '$(Configuration)' == 'Release' " />

		<MakeDir Directories="$(RELEASE_MANAGED)" Condition=" '$(Configuration)' == 'Release' " />
		<MakeDir Directories="$(RELEASE_PLUGIN)" Condition=" '$(Configuration)' == 'Release' " />
		<MakeDir Directories="$(RELEASE_PLUGIN)/ValheimVRM" Condition=" '$(Configuration)' == 'Release' " />


		<!-- Copy ValheimVRM.dll and assets to release -->
		<Copy Condition=" '$(Configuration)' == 'Release' " SourceFiles="$(TargetPath)" DestinationFolder="$(RELEASE_PLUGIN)/ValheimVRM" />
		<Copy Condition=" '$(Configuration)' == 'Release' " SourceFiles="$(ROOT_DIR)/Assets/UniVRM.shaders" DestinationFolder="$(RELEASE_PLUGIN)/ValheimVRM" />


		<Copy Condition=" '$(Configuration)' == 'Release' " SourceFiles="@(LibFiles)" DestinationFolder="$(RELEASE_MANAGED)" />


		<!-- Copy project documentation files -->
		<ItemGroup Condition=" '$(Configuration)' == 'Release' ">
			<ProjectFiles Include="$(ROOT_DIR)/settings____Default.txt.example" />
			<ProjectFiles Include="$(ROOT_DIR)/settings_Example.txt.example" />
			<ProjectFiles Include="$(ROOT_DIR)/global_settings.txt.example" />
			<ProjectFiles Include="$(ROOT_DIR)/README.md" />
		</ItemGroup>
		<Copy Condition=" '$(Configuration)' == 'Release' " SourceFiles="@(ProjectFiles)" DestinationFolder="$(RELEASE_STAGING)/ValheimVRM" />


		<!-- Zip for release -->

		<!-- Windows: use PowerShell Compress-Archive -->
		<Exec Condition=" '$(Configuration)' == 'Release' and '$(OS)' == 'Windows_NT' " Command="powershell -NoProfile -NonInteractive -Command &quot;Compress-Archive -Path '$(RELEASE_STAGING)*' -DestinationPath '$(FINAL_RELEASE)/ValheimVRM-$(Version).zip' -Force&quot;" />

		<!-- Linux: use zip -->
		<Exec Condition=" '$(Configuration)' == 'Release' and '$(OS)' != 'Windows_NT' " Command="cd '$(RELEASE_STAGING)' &amp;&amp; zip -r -9 '$(FINAL_RELEASE)/ValheimVRM-$(Version).zip' ." />

		<!-- Cleanup after archiving -->
		<RemoveDir Condition=" '$(Configuration)' == 'Release' " Directories="$(RELEASE_STAGING)" />
	</Target>

</Project>
